@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix owl:  <http://www.w3.org/2002/07/owl#> . 

#------------------------------------------------------------------
# RDFS rule set v0.1.
# This variant is used in the case where the subclass and subproperty
# lattices have been precomputed by a transitive graph closure cache.
# $Id: rdfs-fb-tgc-noresource.rules,v 1.3 2003-08-21 22:06:42 der Exp $
#------------------------------------------------------------------

#------------------------------------------------------------------
# Tabling directives
#------------------------------------------------------------------

-> table(rdf:type)

#------------------------------------------------------------------
# RDFS Axioms
#------------------------------------------------------------------

-> (rdf:type      rdfs:range rdfs:Class).
-> (rdfs:Resource  rdf:type  rdfs:Class).
-> (rdfs:Literal   rdf:type  rdfs:Class).
-> (rdf:Statement  rdf:type  rdfs:Class).
-> (rdf:nil        rdf:type  rdf:List).
-> (rdf:subject    rdf:type  rdf:Property).
-> (rdf:object     rdf:type  rdf:Property).
-> (rdf:predicate  rdf:type  rdf:Property).
-> (rdf:first      rdf:type  rdf:Property).
-> (rdf:rest       rdf:type  rdf:Property).
        
-> (rdfs:subPropertyOf rdfs:domain rdf:Property).
-> (rdfs:subClassOf rdfs:domain rdfs:Class).
-> (rdfs:domain rdfs:domain rdf:Property).
-> (rdfs:range rdfs:domain rdf:Property).
-> (rdf:subject rdfs:domain rdf:Statement).
-> (rdf:predicate rdfs:domain rdf:Statement).
-> (rdf:object rdfs:domain rdf:Statement).
-> (rdf:first rdfs:domain rdf:List).
-> (rdf:rest rdfs:domain rdf:List).

-> (rdfs:subPropertyOf rdfs:range rdf:Property).
-> (rdfs:subClassOf rdfs:range rdfs:Class).
-> (rdfs:domain rdfs:range rdfs:Class).
-> (rdfs:range rdfs:range rdfs:Class).
-> (rdf:type rdfs:range rdfs:Class).
-> (rdfs:comment rdfs:range rdfs:Literal).
-> (rdfs:label rdfs:range rdfs:Literal).
-> (rdf:rest rdfs:range rdf:List).

-> (rdf:Alt rdfs:subClassOf rdfs:Container).
-> (rdf:Bag rdfs:subClassOf rdfs:Container).
-> (rdf:Seq rdfs:subClassOf rdfs:Container).
-> (rdfs:ContainerMembershipProperty rdfs:subClassOf rdf:Property).

-> (rdfs:isDefinedBy rdfs:subPropertyOf rdfs:seeAlso).

-> (rdf:XMLLiteral rdf:type rdfs:Datatype).
-> (rdfs:Datatype rdfs:subClassOf rdfs:Class).

#------------------------------------------------------------------
# RDFS Closure rules
#------------------------------------------------------------------

#[rdfs7b: (?a rdf:type rdfs:Class) -> (?a rdfs:subClassOf rdfs:Resource)] 

#[rdfs2:  (?p rdfs:domain ?c) -> [(?x rdf:type ?c) <- (?x ?p ?y)] ] 
#[rdfs3:  (?p rdfs:range ?c)  -> [(?y rdf:type ?c) <- (?x ?p ?y)] ] 
#[rdfs5b: (?a rdf:type rdf:Property) -> (?a rdfs:subPropertyOf ?a)] 
[rdfs6:  (?p rdfs:subPropertyOf ?q), notEqual(?p,?q) -> table(?p), table(?q), [ (?a ?q ?b) <- (?a ?p ?b)] ] 
#[rdfs7:  (?a rdf:type rdfs:Class) -> (?a rdfs:subClassOf ?a)]
#[rdfs10: (?x rdf:type rdfs:ContainerMembershipProperty) -> (?x rdfs:subPropertyOf rdfs:member)] 

#[rdfs2-partial: (?p rdfs:domain ?c) -> (?c rdf:type rdfs:Class)]
#[rdfs3-partial: (?p rdfs:range ?c)  -> (?c rdf:type rdfs:Class)]

[rdfs9-alt:  (?a rdf:type ?y) <- (?x rdfs:subClassOf ?y), (?a rdf:type ?x) ] 

#------------------------------------------------------------------
# Nuno: RDFS + OWL rule set v0.1.
# 
# 
# 
#------------------------------------------------------------------

#[rdfs2:  (?x ?p ?y), (?p rdfs:domain ?c) -> (?x rdf:type ?c)]
#[rdfs3:  (?x ?p ?y), (?p rdfs:range ?c) -> (?y rdf:type ?c)]
[rdfs6:  (?a ?p ?b), (?p rdfs:subPropertyOf ?q) -> (?a ?q ?b)]
[rdfs9:  (?x rdfs:subClassOf ?y), (?a rdf:type ?x) -> (?a rdf:type ?y)]

-> (owl:FunctionalProperty rdfs:subClassOf rdf:Property).
-> (owl:ObjectProperty rdfs:subClassOf rdf:Property).
-> (owl:DatatypeProperty rdfs:subClassOf rdf:Property).
-> (owl:InverseFunctionalProperty rdfs:subClassOf owl:ObjectProperty).
-> (owl:TransitiveProperty rdfs:subClassOf owl:ObjectProperty).
-> (owl:SymmetricProperty rdfs:subClassOf owl:ObjectProperty).

-> (rdf:first rdf:type owl:FunctionalProperty).
-> (rdf:rest rdf:type owl:FunctionalProperty).

#-> (owl:oneOf rdfs:domain owl:Class).

-> (owl:Class rdfs:subClassOf rdfs:Class).
-> (owl:Restriction rdfs:subClassOf owl:Class).

-> (owl:Thing rdf:type owl:Class).
-> (owl:Nothing rdf:type owl:Class).

#-> (owl:equivalentClass rdfs:domain owl:Class).
#-> (owl:equivalentClass rdfs:range  owl:Class).

#-> (owl:disjointWith rdfs:domain owl:Class).
#-> (owl:disjointWith rdfs:range  owl:Class).

-> (owl:sameAs rdf:type owl:SymmetricProperty).
#-> (owl:sameIndividualAs owl:equivalentProperty owl:sameAs).

#-> (owl:onProperty rdfs:domain owl:Restriction).
#-> (owl:onProperty rdfs:range  owl:Property).

-> (owl:OntologyProperty rdfs:subClassOf rdf:Property).
#-> (owl:imports rdf:type owl:OntologyProperty).
#-> (owl:imports rdfs:domain owl:Ontology).
#-> (owl:imports rdfs:range  owl:Ontology).

#-> (owl:priorVersion rdfs:domain owl:Ontology).
#-> (owl:priorVersion rdfs:range  owl:Ontology).

#-> (owl:backwardCompatibleWith rdfs:domain owl:Ontology).
#-> (owl:backwardCompatibleWith rdfs:range  owl:Ontology).

#-> (owl:incompatibleWith rdfs:domain owl:Ontology).
#-> (owl:incompatibleWith rdfs:range  owl:Ontology).

#-> (owl:versionInfo rdf:type owl:AnnotationProperty).

-> (owl:differentFrom rdf:type owl:SymmetricProperty).
-> (owl:disjointWith rdf:type owl:SymmetricProperty).

-> (owl:intersectionOf rdfs:domain owl:Class).

# EquivalentProperty

[equivalentProperty1: (?P owl:equivalentProperty ?Q)
            -> (?P rdfs:subPropertyOf ?Q), (?Q rdfs:subPropertyOf ?P) ]

[equivalentProperty2: (?P rdfs:subPropertyOf ?Q), (?Q rdfs:subPropertyOf ?P)
            -> (?P owl:equivalentProperty ?Q) ]

[equivalentProperty3: (?P owl:sameAs ?Q), (?P rdf:type rdf:Property), (?Q rdf:type rdf:Property)
            -> (?P owl:equivalentProperty ?Q) ]

# equivalentClass
[equivalentClass1: (?P owl:equivalentClass ?Q)
            -> (?P rdfs:subClassOf ?Q), (?Q rdfs:subClassOf ?P) ]

[equivalentClass2: (?P owl:equivalentClass ?Q) <-  (?P rdfs:subClassOf ?Q), (?Q rdfs:subClassOf ?P) ]

[equivalentClass3: (?P owl:sameAs ?Q), (?P rdf:type rdfs:Class), (?Q rdf:type rdfs:Class)
            -> (?P owl:equivalentClass ?Q) ]

# sameAs propagation rules - forward version

#[sameAs1: (?A owl:sameAs ?B) -> (?B owl:sameAs ?A) ]

[sameAs2: (?A owl:sameAs ?B) (?B owl:sameAs ?C) -> (?A owl:sameAs ?C) ]

#[sameAs6: (?X rdf:type owl:Thing) <- (?X owl:sameAs ?Y) ]

# Equality processing rules

[equality1: (?X owl:sameAs ?Y), notEqual(?X,?Y) ->
    [(?X ?P ?V) <- (?Y ?P ?V)]
    [(?V ?P ?X) <- (?V ?P ?Y)] ]

[equality2: (?X owl:sameAs ?Y), (?X rdf:type owl:Class) -> (?X owl:equivalentClass ?Y) ]

[equality3: (?X owl:sameAs ?Y), (?X rdf:type rdf:Property) -> (?X owl:equivalentProperty ?Y) ]